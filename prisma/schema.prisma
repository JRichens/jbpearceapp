// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  uniqueId                 String        @default(cuid())
  reg                      String        @id
  vinOriginalDvla          String?
  dvlaMake                 String?
  dvlaModel                String?
  modelSeries              String?
  modelVariant             String?
  nomCC                    String?
  colourCurrent            String?
  dvlaYearOfManufacture    String?
  originCountry            String?
  weight                   String?
  euroStatus               String?
  engineCode               String?
  engineCapacity           String?
  noCylinders              String?
  fuelType                 String?
  transmission             String?
  aspiration               String?
  maxBHP                   String?
  maxTorque                String?
  driveType                String?
  gears                    String?
  vehicleCategory          String?
  imageUrl                 String?
  exportVehicle            Boolean?      @default(false)
  addedToExport            DateTime?
  breakingVehicle          Boolean?      @default(false)
  addedToBreaking          DateTime?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  breaking                 Breaking?
  exporting                Exporting?
  enginePrice              Float? @default(0)
  paintCode                String?
}

model EnginePrice {
  id          String   @id @default(cuid())
  engineCode  String   @unique
  price       Float
  created     DateTime @default(now())
  updated     DateTime @updatedAt
}

model Breaking {
  id          String   @id @default(cuid()) 
  car         Car      @relation(fields: [carReg], references: [reg])
  carReg      String   @unique
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  photos      String[]
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  breaking   Breaking @relation(fields: [breakingId], references: [id])
  breakingId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Exporting {
  id          String   @id @default(cuid()) 
  car         Car      @relation(fields: [carReg], references: [reg])
  carReg      String   @unique
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  photos      String[]
  exportingList ExportingList? @relation(fields: [exportingListId], references: [id])
  exportingListId String?
}

model ExportingList {
  id        String      @id @default(cuid())
  name      String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  exportings Exporting[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Task {
  id             String @default(cuid()) @id
  name           String
  description    String
  checkDate      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  completed      Boolean? @default(false)
  completedAt    DateTime?
  completedBy    String?
}

model TaskDetails {
  id             String @default(cuid()) @id
  name           String
  description    String
}

model Event {
  id             String @default(cuid()) @id
  type           String
  name           String
  date           String
  description    String
  attachments    String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt @default(now())
  lastVisit     DateTime?      @default(now())  
  clerkId       String
  name          String
  initials      String?
  email         String
  userType      UserType       @relation(fields: [userTypeId], references: [name])
  userTypeId    String
  weightcapture weightcapture[]
  pageViewDays  PageViewDay[]
  reservations  Reservation[]
  exportingLists ExportingList[]
}

model UserType {
  id   String @id @default(cuid())
  name String @unique
  User User[]
}

model saveweight {
  id     String   @id @default(cuid())
  weight String
  stable Boolean
  date   DateTime @default(now())
}

model weightcapture {
  id      String   @id @default(cuid())
  weight  String
  date    DateTime @default(now())
  note    String
  userId  String
  user    User     @relation(fields: [userId], references: [id])
}

model Customer {
  id                String @id @default(cuid())
  name              String @unique
  firstLineAddress  String?
  secondLineAddress String?
  townCity          String?
  postcode          String?
  emailpod          String?
  emailinvoice      String?
  mobile            String?
  officephone       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LandArea {
  id            String @id @default(cuid())
  created       DateTime @default(now())
  issuedDate    String
  modified      DateTime @updatedAt
  plotNo        String @default("0")
  STid          String?
  registryNo    String @default("")
  purchaseDate  String @default("01-01-2000")
  purchasePrice Float @default(0)
  name          String @default("Land Name")
  ownership     String?
  description   String @default("Land Description")
  area          String
  colour        String @default("#008B02")
  centerLat     Float?
  centerLng     Float?
  coordinates   String[]
  notes         String?
  notesRead     Boolean? @default(true)
  agValue       Float?
  hopeValue     Float?
  type          String?
}

model FarmLandArea {
  id            String @id @default(cuid())
  parcelId      String?
  created       DateTime @default(now())
  modified      DateTime @updatedAt
  STid          String?
  name          String @default("Land Name")
  description   String @default("Land Description")
  activityCode  String?
  hectares      String
  acres         String
  SBIno         String?
  colour        String @default("#008B02")
  centerLat     Float?
  centerLng     Float?
  coordinates   String[]
}

model PageView {
  id        String        @id @default(cuid())
  page      String
  days      PageViewDay[]
  created   DateTime      @default(now())
  modified  DateTime      @updatedAt
}

model PageViewDay {
  id          String    @id @default(cuid())
  created     DateTime  @default(now())
  modified    DateTime  @updatedAt
  description String
  pageView    PageView  @relation(fields: [pageViewId], references: [id])
  pageViewId  String
  users       User[]
}

enum MOTStatus {
  Valid
  Expired
  Upcoming
  Booked
  Agri
  NA
}

enum TAXStatus {
  Taxed
  Untaxed
  Upcoming
  SORN
}

model CompanyVehicles {
  id            String @id @default(cuid())
  created       DateTime @default(now())
  modified      DateTime @updatedAt
  company       String
  registration  String
  description   String
  MOTdate       String @default("")
  MOTstatus     MOTStatus @default(Valid)
  MOTdays       Int @default(0)
  TAXdate       String @default("")
  TAXstatus     TAXStatus @default(Taxed)
  TAXdays       Int @default(0)
}

model WeighbridgeTicket {
  id              String           @id @default(cuid())
  created         DateTime         @default(now())
  modified        DateTime         @updatedAt
  driver          String
  customer        String?
  notes           String?
  materials       TicketMaterial[] // One WeighbridgeTicket can have many TicketMaterials
}

model TicketMaterial {
  id              String            @id @default(cuid())
  created         DateTime          @default(now())
  modified        DateTime          @updatedAt
  material        String?
  weight1         String?
  date1           DateTime?
  weight2         String?
  date2           DateTime?
  weightDeduction String?
  priceDeduction  String?
  
  // Relation fields
  weighbridgeTicket   WeighbridgeTicket  @relation(fields: [weighbridgeTicketId], references: [id], onDelete: Cascade)
  weighbridgeTicketId String
}